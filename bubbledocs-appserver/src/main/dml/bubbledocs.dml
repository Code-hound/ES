package pt.tecnico.bubbledocs.domain;

/*
enum Permission {
	ROOT, OWNER, 
	READ, WRITE, 
	WRITEREAD

}
*/
class BubbleDocs{
	int _entityId;
	int _nextSpreadSheetId;
}

class User {
	String _username;
	String _name;
	String _password;
}

class Session {
	String userToken;
	LocalTime LastAccess;
}

class SpreadSheet {
	int _id;
	String _spreadSheetName;
	LocalDate _date;
	int _numberRows;
	int _numberColumns;
}

class Access{
	int _permission;
}


class Cell {
	int _cellRow;
	int _cellColumn;
	boolean _protected;
}

class Content;

class Literal extends Content {
	int _number;
}

class Reference extends Content;

class Function extends Content;

class BinaryFunction extends Function;

class ADD extends BinaryFunction;

class SUB extends BinaryFunction;

class MUL extends BinaryFunction;

class DIV extends BinaryFunction;

class RangedFunction extends Function;

class AVG extends RangedFunction;

class PRD extends RangedFunction;

//Relation Specification

relation DomainRootHasBubbleDocsApplication{
	.pt.ist.fenixframework.DomainRoot playsRole root {
		multiplicity 0..1;
		}
		BubbleDocs playsRole bubbleDocs {
			multiplicity 0..1;
		}
}

relation SpreadSheetContainsAccess{
	//Lists the permission that a user has to access a certain document
	SpreadSheet playsRole document;
	Access playsRole docAccess{
		multiplicity 0..*;
	}
	
}

relation BubbleDocsContainsSpreadSheet{
	BubbleDocs playsRole bubbleDocs;
	SpreadSheet playsRole docs {
		multiplicity 0..*;
	}
}
relation BubbleDocsContainsUser{
	BubbleDocs playsRole bubbleDocs;
	User playsRole users{
		multiplicity 1..*;
	}

}

relation BubbleDocsContainsSession {
	BubbleDocs playsRole bubbleDocs;
	
	Session playsRole sessions {
		multiplicity 1..*;
	}
}

/*
relation SpreadSheetContainsUser{
	SpreadSheet playsRole spreadSheet;
	User playsRole creator{
		multiplicity 1;
	}
}*/


relation AccessContainsUser {
	Access playsRole access;
	
	User playsRole user {
		multiplicity 1;
	}
}

relation SpreadSheetContainsUser{
	SpreadSheet playsRole document;
	User playsRole owner{
		multiplicity 1;
	}
}

relation SpreadSheetContainsCells {
	SpreadSheet playsRole document;
	Cell playsRole cells {
		multiplicity 1..*;
	}
}

relation CellContainsContent {
	Cell playsRole cell;
	Content playsRole content {
		multiplicity 0..1;
	}
}

relation ReferenceContainsCell {
	Reference playsRole reference;
	Cell playsRole cell_reference{
		multiplicity 1;
	}
}

relation FunctionContainsContent {
	Function playsRole function;
	Content playsRole args{
		multiplicity 2;
	}
}

